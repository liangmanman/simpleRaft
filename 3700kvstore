#!/usr/bin/env python

import sys, socket, select, time, json, random

# Your ID number
my_id = sys.argv[1]
my_leader = ""
last_hearbeat = 0
election_timeout = random(250, 500) # random timeout for election
heartbeat_timeout = 100
is_leader = False
term = 0 # current term number
votes_left = 1 # votes left in the term
votes_acquired = 0 # votes acquired in current election

# The ID numbers of all the other replicas
replica_ids = sys.argv[2:]

# Connect to the network. All messages to/from other replicas and clients will
# occur over this socket
sock = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
sock.connect(my_id)

last = 0

def current_ms():
    """
    Gets the current time in ms
    """
    return int(round(time.time() * 1000))

def run_for_leader():
    """
    elects a leader
    """
    global votes_left, votes_acquired, term, election_timeout, last_hearbeat

    election_timeout = random(250, 500)
    last_hearbeat = current_ms()
    votes_left -= 1
    votes_acquired += 1
    term += 1

    candidate_msg = {
        'src': my_id,
        'dst': 'FFFF',
        'type': 'candidate',
        'term': term
    }
    sock.send(json.dumps(candidate_msg))


def cast_vote(src):
    """
    Votes for the candidate
    """
    global votes_left

    votes_left -= 1

    vote_msg = {
        'src': my_id,
        'dst': src,
        'type': 'vote'
    }
    sock.send(json.dumps(vote_msg))


def recv_vote():
    """
    Receives the vote from followers
    """
    votes_acquired += 1
    if float(votes_acquired / len(replica_ids)) > .5:
        elect_leader()

def elect_leader():
    global is_leader, my_leader, term, votes_acquired, votes_left

    is_leader = True
    my_leader = my_id
    votes_acquired = 0
    votes_left = 1

    election_msg ={
        'src': my_id,
        'dst': 'FFFF',
        'type': 'new_leader',
        'term': term
    }
    sock.send(json.dumps(election_msg))

def send_heartbeat():
    election_msg ={
        'src': my_id,
        'dst': 'FFFF',
        'type': 'heartbeat',
        'term': term
    }

while True:

    if not is_leader and (current_ms() - last_hearbeat >= election_timeout):
        run_for_leader()

    if is_leader and (current_ms() - last_hearbeat > heartbeat_timeout):
        send_heartbeat()

    ready = select.select([sock], [], [], 0.1)[0]

    if sock in ready:
        msg_raw = sock.recv(32768)

        if len(msg_raw) == 0:
            continue
        msg = json.loads(msg_raw)

        if msg['type'] in ['candidate'] and msg['term'] >= term:
            cast_vote(msg['src'])
        elif msg['type'] in ['vote']:
            recv_vote()
        elif msg['type'] in ['new_leader'] and msg['term'] >= term:
            last_heartbeat = current_ms()
            my_leader = msg['src']
            term = msg['term']
            votes_left = 1
            votes_acquired = 0
        elif msg['type'] in ['heartbeat']:
            last_hearbeat = current_ms()
            if msg['term'] > term:
                my_leader = msg['src']
                term = msg['term']
                votes_left = 1
                votes_acquired = 0


        if msg['type'] in ['get', 'put']:
            if not is_leader:
                msg = {
                    'src': my_id,
                    'dst': my_leader,
                    'leader': my_leader,
                    'type': 'redirect',
                    'MID': msg['MID']
                }
                sock.send(json.dumps(msg))
            else:
                #do whatever

        # Handle noop messages. This may be removed from your final implementation
        elif msg['type'] == 'noop':
            print '%s received a NOOP from %s' % (msg['dst'], msg['src'])

    clock = time.time()
    if clock - last > 2:
        # Send a no-op message to a random peer every two seconds, just for fun
        # You definitely want to remove this from your implementation
        msg = {'src': my_id, 'dst': random.choice(replica_ids), 'leader': 'FFFF', 'type': 'noop'}
        sock.send(json.dumps(msg))
        print '%s sending a NOOP to %s' % (msg['src'], msg['dst'])
        last = clock
